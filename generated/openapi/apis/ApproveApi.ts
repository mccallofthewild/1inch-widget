/* tslint:disable */
/* eslint-disable */
/**
 * 1inch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApproveCallData,
    ApproveCallDataFromJSON,
    ApproveCallDataToJSON,
    SpenderAddress,
    SpenderAddressFromJSON,
    SpenderAddressToJSON,
} from '../models';

export interface GetCallDataRequest {
    tokenAddress: string;
    amount?: number;
    infinity?: boolean;
}

/**
 * 
 */
export class ApproveApi extends runtime.BaseAPI {

    /**
     * Generated approve calldata
     */
    async getCallDataRaw(requestParameters: GetCallDataRequest): Promise<runtime.ApiResponse<ApproveCallData>> {
        if (requestParameters.tokenAddress === null || requestParameters.tokenAddress === undefined) {
            throw new runtime.RequiredError('tokenAddress','Required parameter requestParameters.tokenAddress was null or undefined when calling getCallData.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.infinity !== undefined) {
            queryParameters['infinity'] = requestParameters.infinity;
        }

        if (requestParameters.tokenAddress !== undefined) {
            queryParameters['tokenAddress'] = requestParameters.tokenAddress;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/approve/calldata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveCallDataFromJSON(jsonValue));
    }

    /**
     * Generated approve calldata
     */
    async getCallData(requestParameters: GetCallDataRequest): Promise<ApproveCallData> {
        const response = await this.getCallDataRaw(requestParameters);
        return await response.value();
    }

    /**
     * Address of spender
     */
    async getSpenderAddressRaw(): Promise<runtime.ApiResponse<SpenderAddress>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/approve/spender`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpenderAddressFromJSON(jsonValue));
    }

    /**
     * Address of spender
     */
    async getSpenderAddress(): Promise<SpenderAddress> {
        const response = await this.getSpenderAddressRaw();
        return await response.value();
    }

}
