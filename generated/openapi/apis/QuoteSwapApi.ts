/* tslint:disable */
/* eslint-disable */
/**
 * 1inch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Quote,
    QuoteFromJSON,
    QuoteToJSON,
    Swap,
    SwapFromJSON,
    SwapToJSON,
} from '../models';

export interface GetQuoteRequest {
    fromTokenAddress: string;
    toTokenAddress: string;
    amount: number;
    fee?: number;
    protocols?: string;
    gasPrice?: string;
    complexityLevel?: string;
    connectorTokens?: string;
    gasLimit?: number;
    parts?: number;
    virtualParts?: number;
    mainRouteParts?: number;
}

export interface SwapRequest {
    fromTokenAddress: string;
    toTokenAddress: string;
    amount: number;
    fromAddress: string;
    slippage: number;
    protocols?: string;
    destReceiver?: string;
    referrerAddress?: string;
    fee?: number;
    gasPrice?: string;
    burnChi?: boolean;
    complexityLevel?: string;
    connectorTokens?: string;
    allowPartialFill?: boolean;
    disableEstimate?: boolean;
    gasLimit?: number;
    parts?: number;
    virtualParts?: number;
    mainRouteParts?: number;
}

/**
 * 
 */
export class QuoteSwapApi extends runtime.BaseAPI {

    /**
     * Quote
     */
    async getQuoteRaw(requestParameters: GetQuoteRequest): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.fromTokenAddress === null || requestParameters.fromTokenAddress === undefined) {
            throw new runtime.RequiredError('fromTokenAddress','Required parameter requestParameters.fromTokenAddress was null or undefined when calling getQuote.');
        }

        if (requestParameters.toTokenAddress === null || requestParameters.toTokenAddress === undefined) {
            throw new runtime.RequiredError('toTokenAddress','Required parameter requestParameters.toTokenAddress was null or undefined when calling getQuote.');
        }

        if (requestParameters.amount === null || requestParameters.amount === undefined) {
            throw new runtime.RequiredError('amount','Required parameter requestParameters.amount was null or undefined when calling getQuote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.fromTokenAddress !== undefined) {
            queryParameters['fromTokenAddress'] = requestParameters.fromTokenAddress;
        }

        if (requestParameters.toTokenAddress !== undefined) {
            queryParameters['toTokenAddress'] = requestParameters.toTokenAddress;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.fee !== undefined) {
            queryParameters['fee'] = requestParameters.fee;
        }

        if (requestParameters.protocols !== undefined) {
            queryParameters['protocols'] = requestParameters.protocols;
        }

        if (requestParameters.gasPrice !== undefined) {
            queryParameters['gasPrice'] = requestParameters.gasPrice;
        }

        if (requestParameters.complexityLevel !== undefined) {
            queryParameters['complexityLevel'] = requestParameters.complexityLevel;
        }

        if (requestParameters.connectorTokens !== undefined) {
            queryParameters['connectorTokens'] = requestParameters.connectorTokens;
        }

        if (requestParameters.gasLimit !== undefined) {
            queryParameters['gasLimit'] = requestParameters.gasLimit;
        }

        if (requestParameters.parts !== undefined) {
            queryParameters['parts'] = requestParameters.parts;
        }

        if (requestParameters.virtualParts !== undefined) {
            queryParameters['virtualParts'] = requestParameters.virtualParts;
        }

        if (requestParameters.mainRouteParts !== undefined) {
            queryParameters['mainRouteParts'] = requestParameters.mainRouteParts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/quote`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Quote
     */
    async getQuote(requestParameters: GetQuoteRequest): Promise<Quote> {
        const response = await this.getQuoteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Swap
     */
    async swapRaw(requestParameters: SwapRequest): Promise<runtime.ApiResponse<Swap>> {
        if (requestParameters.fromTokenAddress === null || requestParameters.fromTokenAddress === undefined) {
            throw new runtime.RequiredError('fromTokenAddress','Required parameter requestParameters.fromTokenAddress was null or undefined when calling swap.');
        }

        if (requestParameters.toTokenAddress === null || requestParameters.toTokenAddress === undefined) {
            throw new runtime.RequiredError('toTokenAddress','Required parameter requestParameters.toTokenAddress was null or undefined when calling swap.');
        }

        if (requestParameters.amount === null || requestParameters.amount === undefined) {
            throw new runtime.RequiredError('amount','Required parameter requestParameters.amount was null or undefined when calling swap.');
        }

        if (requestParameters.fromAddress === null || requestParameters.fromAddress === undefined) {
            throw new runtime.RequiredError('fromAddress','Required parameter requestParameters.fromAddress was null or undefined when calling swap.');
        }

        if (requestParameters.slippage === null || requestParameters.slippage === undefined) {
            throw new runtime.RequiredError('slippage','Required parameter requestParameters.slippage was null or undefined when calling swap.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.fromTokenAddress !== undefined) {
            queryParameters['fromTokenAddress'] = requestParameters.fromTokenAddress;
        }

        if (requestParameters.toTokenAddress !== undefined) {
            queryParameters['toTokenAddress'] = requestParameters.toTokenAddress;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.fromAddress !== undefined) {
            queryParameters['fromAddress'] = requestParameters.fromAddress;
        }

        if (requestParameters.slippage !== undefined) {
            queryParameters['slippage'] = requestParameters.slippage;
        }

        if (requestParameters.protocols !== undefined) {
            queryParameters['protocols'] = requestParameters.protocols;
        }

        if (requestParameters.destReceiver !== undefined) {
            queryParameters['destReceiver'] = requestParameters.destReceiver;
        }

        if (requestParameters.referrerAddress !== undefined) {
            queryParameters['referrerAddress'] = requestParameters.referrerAddress;
        }

        if (requestParameters.fee !== undefined) {
            queryParameters['fee'] = requestParameters.fee;
        }

        if (requestParameters.gasPrice !== undefined) {
            queryParameters['gasPrice'] = requestParameters.gasPrice;
        }

        if (requestParameters.burnChi !== undefined) {
            queryParameters['burnChi'] = requestParameters.burnChi;
        }

        if (requestParameters.complexityLevel !== undefined) {
            queryParameters['complexityLevel'] = requestParameters.complexityLevel;
        }

        if (requestParameters.connectorTokens !== undefined) {
            queryParameters['connectorTokens'] = requestParameters.connectorTokens;
        }

        if (requestParameters.allowPartialFill !== undefined) {
            queryParameters['allowPartialFill'] = requestParameters.allowPartialFill;
        }

        if (requestParameters.disableEstimate !== undefined) {
            queryParameters['disableEstimate'] = requestParameters.disableEstimate;
        }

        if (requestParameters.gasLimit !== undefined) {
            queryParameters['gasLimit'] = requestParameters.gasLimit;
        }

        if (requestParameters.parts !== undefined) {
            queryParameters['parts'] = requestParameters.parts;
        }

        if (requestParameters.virtualParts !== undefined) {
            queryParameters['virtualParts'] = requestParameters.virtualParts;
        }

        if (requestParameters.mainRouteParts !== undefined) {
            queryParameters['mainRouteParts'] = requestParameters.mainRouteParts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/swap`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SwapFromJSON(jsonValue));
    }

    /**
     * Swap
     */
    async swap(requestParameters: SwapRequest): Promise<Swap> {
        const response = await this.swapRaw(requestParameters);
        return await response.value();
    }

}
