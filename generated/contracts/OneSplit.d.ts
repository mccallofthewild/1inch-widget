/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OneSplitInterface extends ethers.utils.Interface {
  functions: {
    "getExpectedReturn(address,address,uint256,uint256,uint256)": FunctionFragment;
    "getExpectedReturnWithGas(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "oneSplitView()": FunctionFragment;
    "swap(address,address,uint256,uint256,uint256[],uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getExpectedReturn",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedReturnWithGas",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oneSplitView",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getExpectedReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedReturnWithGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneSplitView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export class OneSplit extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OneSplitInterface;

  functions: {
    getExpectedReturn(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        returnAmount: BigNumber;
        distribution: BigNumber[];
      }
    >;

    "getExpectedReturn(address,address,uint256,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        returnAmount: BigNumber;
        distribution: BigNumber[];
      }
    >;

    getExpectedReturnWithGas(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      destTokenEthPriceTimesGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[]] & {
        returnAmount: BigNumber;
        estimateGasAmount: BigNumber;
        distribution: BigNumber[];
      }
    >;

    "getExpectedReturnWithGas(address,address,uint256,uint256,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      destTokenEthPriceTimesGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[]] & {
        returnAmount: BigNumber;
        estimateGasAmount: BigNumber;
        distribution: BigNumber[];
      }
    >;

    oneSplitView(overrides?: CallOverrides): Promise<[string]>;

    "oneSplitView()"(overrides?: CallOverrides): Promise<[string]>;

    swap(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      distribution: BigNumberish[],
      flags: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swap(address,address,uint256,uint256,uint256[],uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      distribution: BigNumberish[],
      flags: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  getExpectedReturn(
    fromToken: string,
    destToken: string,
    amount: BigNumberish,
    parts: BigNumberish,
    flags: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & {
      returnAmount: BigNumber;
      distribution: BigNumber[];
    }
  >;

  "getExpectedReturn(address,address,uint256,uint256,uint256)"(
    fromToken: string,
    destToken: string,
    amount: BigNumberish,
    parts: BigNumberish,
    flags: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & {
      returnAmount: BigNumber;
      distribution: BigNumber[];
    }
  >;

  getExpectedReturnWithGas(
    fromToken: string,
    destToken: string,
    amount: BigNumberish,
    parts: BigNumberish,
    flags: BigNumberish,
    destTokenEthPriceTimesGasPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber[]] & {
      returnAmount: BigNumber;
      estimateGasAmount: BigNumber;
      distribution: BigNumber[];
    }
  >;

  "getExpectedReturnWithGas(address,address,uint256,uint256,uint256,uint256)"(
    fromToken: string,
    destToken: string,
    amount: BigNumberish,
    parts: BigNumberish,
    flags: BigNumberish,
    destTokenEthPriceTimesGasPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber[]] & {
      returnAmount: BigNumber;
      estimateGasAmount: BigNumber;
      distribution: BigNumber[];
    }
  >;

  oneSplitView(overrides?: CallOverrides): Promise<string>;

  "oneSplitView()"(overrides?: CallOverrides): Promise<string>;

  swap(
    fromToken: string,
    destToken: string,
    amount: BigNumberish,
    minReturn: BigNumberish,
    distribution: BigNumberish[],
    flags: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swap(address,address,uint256,uint256,uint256[],uint256)"(
    fromToken: string,
    destToken: string,
    amount: BigNumberish,
    minReturn: BigNumberish,
    distribution: BigNumberish[],
    flags: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getExpectedReturn(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        returnAmount: BigNumber;
        distribution: BigNumber[];
      }
    >;

    "getExpectedReturn(address,address,uint256,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        returnAmount: BigNumber;
        distribution: BigNumber[];
      }
    >;

    getExpectedReturnWithGas(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      destTokenEthPriceTimesGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[]] & {
        returnAmount: BigNumber;
        estimateGasAmount: BigNumber;
        distribution: BigNumber[];
      }
    >;

    "getExpectedReturnWithGas(address,address,uint256,uint256,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      destTokenEthPriceTimesGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[]] & {
        returnAmount: BigNumber;
        estimateGasAmount: BigNumber;
        distribution: BigNumber[];
      }
    >;

    oneSplitView(overrides?: CallOverrides): Promise<string>;

    "oneSplitView()"(overrides?: CallOverrides): Promise<string>;

    swap(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      distribution: BigNumberish[],
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swap(address,address,uint256,uint256,uint256[],uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      distribution: BigNumberish[],
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getExpectedReturn(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExpectedReturn(address,address,uint256,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpectedReturnWithGas(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      destTokenEthPriceTimesGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExpectedReturnWithGas(address,address,uint256,uint256,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      destTokenEthPriceTimesGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneSplitView(overrides?: CallOverrides): Promise<BigNumber>;

    "oneSplitView()"(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      distribution: BigNumberish[],
      flags: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swap(address,address,uint256,uint256,uint256[],uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      distribution: BigNumberish[],
      flags: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getExpectedReturn(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExpectedReturn(address,address,uint256,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpectedReturnWithGas(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      destTokenEthPriceTimesGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExpectedReturnWithGas(address,address,uint256,uint256,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      parts: BigNumberish,
      flags: BigNumberish,
      destTokenEthPriceTimesGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneSplitView(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oneSplitView()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      distribution: BigNumberish[],
      flags: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swap(address,address,uint256,uint256,uint256[],uint256)"(
      fromToken: string,
      destToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      distribution: BigNumberish[],
      flags: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
